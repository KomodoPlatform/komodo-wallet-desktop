name: komodo-wallet-desktop CD releases

on:
  push:
    branches:
    - temporary_disabled

env:
  DEX_PROJECT_NAME: "komodo-wallet"
  DEX_DISPLAY_NAME: "Komodo Wallet"
  DEX_COMPANY: "KomodoPlatform"
  DEX_VERSION: "0.8.1"
  DEX_WEBSITE: "https://atomicdex.io/"

jobs:

  linux-release:
    name: Linux Build/Release
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Install QT (Linux/Release)
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.14.1'
          host: 'linux'
          target: 'desktop'
          dir: '${{ github.workspace }}'
          modules: 'qtcharts qtwidgets debug_info'

      - name: Setup Nim (Linux/Release)
        uses: jiro4989/setup-nim-action@v1.0.2
        with:
          nim-version: '1.2.0'

      - name: Install deps (Linux/Release)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update  # prevents repo404 errors on apt-remove below
          sudo apt-get remove php5.6-fpm php7.0-fpm php7.1-fpm php7.2-fpm php7.3-fpm php7.3-common php7.4-fpm msodbcsql17
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get upgrade -y
           # base deps
          sudo apt-get install build-essential \
                               libgl1-mesa-dev \
                               ninja-build \
                               curl \
                               wget \
                               software-properties-common \
                               lsb-release \
                               libpulse-dev \
                               libtool \
                               autoconf \
                               unzip \
                               libssl-dev \
                               git -y
          # get right cmake version
          wget https://github.com/Kitware/CMake/releases/download/v3.17.1/cmake-3.17.1.tar.gz -O cmake.tar.gz
          tar xvzf cmake.tar.gz
          cd cmake-3.17.1
          ./bootstrap
          sudo make install

          # get llvm
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 9

          # get libwally
          git clone https://github.com/KomodoPlatform/libwally-core.git
          cd libwally-core
          ./tools/autogen.sh
          ./configure --disable-shared
          sudo make -j2 install

          # set clang version
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-9 100
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 100

          # cleanup
          sudo apt-get clean && \
          sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
          git clone https://github.com/KomodoPlatform/vcpkg vcpkg-repo
          cd vcpkg-repo
          ./bootstrap-vcpkg.sh
          sudo ./vcpkg integrate install
          ./vcpkg install doctest
          ./vcpkg install pthread
          rm -rf ./downloads
          rm -rf ./buildtrees

      - name: Build (Linux/Release)
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/5.14.1/gcc_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/5.14.1
          cd ci_tools_atomic_dex
          export PATH=$HOME/.nimble/bin:$PATH
          nimble build -y
          ./ci_tools_atomic_dex build release
          rm -rf ./vcpkg-repo/downloads
          rm -rf ./vcpkg-repo/buildtrees
          ls build-Release/bin/AntaraAtomicDexAppDir/usr/bin/atomic_qt

      - name: Pack Installer (Linux/Release)
        run: |
          sudo apt-get update
          sudo apt-get install libxrender-dev \
                               zip \
                               libxkbcommon-dev \
                               libxkbcommon-x11-0 \
                               fontconfig-config -y
          python3 -m aqt tool linux tools_ifw 3.2.2 qt.tools.ifw.32
          export QT_IFW_PATH=$PWD/Tools/QtInstallerFramework/3.2/
          cd ci_tools_atomic_dex
          ./create_installer_linux.sh Release
          ls ./installer/AtomicDEX-Pro-Installer
          zip AtomicDEX-Pro-Installer.zip ./installer/AtomicDEX-Pro-Installer

      - name: Upload artifacts (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: AtomicDEX-Pro-Installer-linux-release
          path: ./ci_tools_atomic_dex/AtomicDEX-Pro-Installer.zip

  linux-debug:
    name: Linux Build/Debug
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Install QT (Linux/Debug)
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.14.1'
          host: 'linux'
          target: 'desktop'
          dir: '${{ github.workspace }}'
          modules: 'qtcharts qtwidgets debug_info'

      - name: Setup Nim (Linux/Debug)
        uses: jiro4989/setup-nim-action@v1.0.2
        with:
          nim-version: '1.2.0'

      - name: Install deps (Linux/Debug)
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get update  # prevents repo404 errors on apt-remove below
          sudo apt-get remove php5.6-fpm php7.0-fpm php7.1-fpm php7.2-fpm php7.3-fpm php7.3-common php7.4-fpm msodbcsql17
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get upgrade -y

          # base deps
          sudo apt-get install build-essential \
                               libgl1-mesa-dev \
                               ninja-build \
                               curl \
                               wget \
                               software-properties-common \
                               lsb-release \
                               libpulse-dev \
                               libtool \
                               autoconf \
                               unzip \
                               libssl-dev \
                               git -y
          # get right cmake version
          wget https://github.com/Kitware/CMake/releases/download/v3.17.1/cmake-3.17.1.tar.gz -O cmake.tar.gz
          tar xvzf cmake.tar.gz
          cd cmake-3.17.1
          ./bootstrap
          sudo make install

          # get llvm
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 9

           # get libwally
           git clone https://github.com/KomodoPlatform/libwally-core.git
           cd libwally-core
           ./tools/autogen.sh
           ./configure --disable-shared
           sudo make -j2 install

           # set clang version
           sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-9 100
           sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-9 100

           # cleanup
           sudo apt-get clean && \
           sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
           git clone https://github.com/KomodoPlatform/vcpkg vcpkg-repo
           cd vcpkg-repo
           ./bootstrap-vcpkg.sh
           sudo ./vcpkg integrate install
           ./vcpkg install doctest
           ./vcpkg install pthread
           rm -rf ./downloads
           rm -rf ./buildtrees

      - name: Build (Linux/Debug)
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/5.14.1/gcc_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/5.14.1
          cd ci_tools_atomic_dex
          export PATH=$HOME/.nimble/bin:$PATH
          nimble build -y
          ./ci_tools_atomic_dex build debug
          rm -rf ./vcpkg-repo/downloads
          rm -rf ./vcpkg-repo/buildtrees
          ls build-Debug/bin/AntaraAtomicDexAppDir/usr/bin/atomic_qt

      - name: Pack Installer (Linux/Debug)
        run: |
          sudo apt-get update
          sudo apt-get install libxrender-dev \
                               libxkbcommon-dev \
                               libxkbcommon-x11-0 \
                               zip \
                               fontconfig-config -y
          python3 -m aqt tool linux tools_ifw 3.2.2 qt.tools.ifw.32
          export QT_IFW_PATH=$PWD/Tools/QtInstallerFramework/3.2/
          cd ci_tools_atomic_dex
          ./create_installer_linux.sh Debug
          ls ./installer/AtomicDEX-Pro-Installer
          zip AtomicDEX-Pro-Installer.zip ./installer/AtomicDEX-Pro-Installer

      - name: Upload artifacts (Linux/Debug)
        uses: actions/upload-artifact@v4
        with:
          name: AtomicDEX-Pro-Installer-linux-debug
          path: ./ci_tools_atomic_dex/AtomicDEX-Pro-Installer.zip

  macos-release:
    name: MacOS Build/Release
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install QT (MacOS/Release)
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.14.2'
          host: 'mac'
          target: 'desktop'
          dir: '${{ github.workspace }}'
          modules: 'qtcharts qtwidgets debug_info'

      - name: Install deps (MacOS/Release)
        run: |
          brew update
          brew upgrade
          brew install autoconf \
                       automake \
                       libtool \
                       pkgconfig \
                       wget \
                       nim \
                       cmake \
                       ninja \
                       git \
                       boost \
                       gcc

          # get libbitcoin
          git clone --depth 1 --branch version5 --single-branch "https://github.com/libbitcoin/secp256k1"
          cd secp256k1
          ./autogen.sh
          ./configure --disable-shared --disable-tests --enable-module-recovery
          make
          sudo make install
          cd ../

          git clone --depth 1 --branch version3 --single-branch https://github.com/KomodoPlatform/libbitcoin-system.git
          cd libbitcoin-system
          ./autogen.sh
          ./configure --with-boost --disable-shared
          make
          sudo make install
          sudo update_dyld_shared_cache

      - name: Build (MacOS/Release)
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/5.14.2/clang_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/5.14.2
          cd ci_tools_atomic_dex
          nimble build -y
          ./ci_tools_atomic_dex bundle release
          ls bundle-Release/atomicDEX-Pro.dmg

      - name: Upload artifacts (MacOS/Release)
        uses: actions/upload-artifact@v4
        with:
          name: dexpro-mac-release.dmg
          path: ./ci_tools_atomic_dex/bundle-Release/atomicDEX-Pro.dmg

  macos-debug:
    name: MacOS Build/Debug
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2

      - name: Install QT (MacOS/Debug)
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.14.2'
          host: 'mac'
          target: 'desktop'
          dir: '${{ github.workspace }}'
          modules: 'qtcharts qtwidgets debug_info'

      - name: Install deps (MacOS/Debug)
        run: |
          brew update
          brew upgrade
          brew install autoconf \
                       automake \
                       libtool \
                       pkgconfig \
                       wget \
                       nim \
                       cmake \
                       ninja \
                       git \
                       boost \
                       gcc

          # get libbitcoin
          git clone --depth 1 --branch version5 --single-branch "https://github.com/libbitcoin/secp256k1"
          cd secp256k1
          ./autogen.sh
          ./configure --disable-shared --disable-tests --enable-module-recovery
          make
          sudo make install
          cd ../

          git clone --depth 1 --branch version3 --single-branch https://github.com/KomodoPlatform/libbitcoin-system.git
          cd libbitcoin-system
          ./autogen.sh
          ./configure --with-boost --disable-shared
          make
          sudo make install
          sudo update_dyld_shared_cache

      - name: Build (MacOS/Debug)
        run: |
          export QT_INSTALL_CMAKE_PATH=${{ github.workspace }}/Qt/5.14.2/clang_64/lib/cmake
          export QT_ROOT=${{ github.workspace }}/Qt/5.14.2
          cd ci_tools_atomic_dex
          nimble build -y
          ./ci_tools_atomic_dex bundle debug
          ls bundle-Debug/atomicDEX-Pro.dmg

      - name: Upload artifacts (MacOS/Debug)
        uses: actions/upload-artifact@v4
        with:
          name: dexpro-mac-debug.dmg
          path: ./ci_tools_atomic_dex/bundle-Debug/atomicDEX-Pro.dmg

  windows-release:
    name: Win Build/Release
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v2

      - name: Install QT (Win/Release)
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.14.1'
          host: 'windows'
          target: 'desktop'
          dir: 'C:\'
          modules: 'qtcharts qtwidgets debug_info'

      - name: Build (Win/Release)
        shell: powershell
        run: |
          $Env:QT_INSTALL_CMAKE_PATH = "C:\Qt\5.14.1\msvc2017_64"
          Set-ExecutionPolicy RemoteSigned -scope CurrentUser
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')

          scoop install nim --global
          scoop install llvm --global
          scoop install ninja --global
          scoop install cmake --global
          scoop install git --global

          # clear scoop cache
          scoop cache rm 7zip
          scoop cache rm git
          scoop cache rm cmake
          scoop cache rm ninja
          scoop cache rm llvm
          scoop cache rm nim

          cd ci_tools_atomic_dex
          $file = 'src\generate.nim'
          $regex = '(?<=g_vcpkg_cmake_script_path & ")[^"]*'
          (Get-Content $file) -replace $regex, ' -DVCPKG_TARGET_TRIPLET=x64-windows ' | Set-Content $file
          nimble.exe build -y

          & cmd /c 'git clone https://github.com/KomodoPlatform/vcpkg vcpkg-repo 2>&1'
          cd vcpkg-repo
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe integrate install
          .\vcpkg.exe install entt
          .\vcpkg.exe install folly
          .\vcpkg.exe install boost-multiprecision
          .\vcpkg.exe install boost-random
          .\vcpkg.exe install doctest
          .\vcpkg.exe install fmt
          .\vcpkg.exe install curl
          .\vcpkg.exe install nlohmann-json
          rd -r ".\buildtrees\" -ErrorAction SilentlyContinue
          rd -r ".\downloads\" -ErrorAction SilentlyContinue
          .\vcpkg.exe install range-v3
          .\vcpkg.exe install libsodium
          .\vcpkg.exe install date
          .\vcpkg.exe install pthreads
          .\vcpkg.exe install zlib
          .\vcpkg.exe install gtest
          .\vcpkg.exe install jsoncpp
          rd -r ".\buildtrees\" -ErrorAction SilentlyContinue
          rd -r ".\downloads\" -ErrorAction SilentlyContinue

          cd ..
          cmd /c '.\ci_tools_atomic_dex.exe build release 2>&1'
          cmd /c '.\ci_tools_atomic_dex.exe bundle release 2>&1'
          ls bundle-Release/bundle.zip

      - name: Upload artifacts (Win/Release)
        uses: actions/upload-artifact@v4
        with:
          name: dexpro-win-release
          path: ./ci_tools_atomic_dex/bundle-Release/bundle.zip

  windows-debug:
    name: Win Build/Debug
    runs-on: windows-2019

    steps:
      - uses: actions/checkout@v2

      - name: Install QT (Win/Debug)
        uses: jurplel/install-qt-action@v2
        with:
          version: '5.14.1'
          host: 'windows'
          target: 'desktop'
          dir: 'C:\'
          modules: 'qtcharts qtwidgets debug_info'

      - name: Build (Win/Debug)
        shell: powershell
        run: |
          $Env:QT_INSTALL_CMAKE_PATH = "C:\Qt\5.14.1\msvc2017_64"
          Set-ExecutionPolicy RemoteSigned -scope CurrentUser
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')

          scoop install nim --global
          scoop install llvm --global
          scoop install ninja --global
          scoop install cmake --global
          scoop install git --global

          # clear scoop cache
          scoop cache rm 7zip
          scoop cache rm git
          scoop cache rm cmake
          scoop cache rm ninja
          scoop cache rm llvm
          scoop cache rm nim

          cd ci_tools_atomic_dex
          $file = 'src\generate.nim'
          $regex = '(?<=g_vcpkg_cmake_script_path & ")[^"]*'
          (Get-Content $file) -replace $regex, ' -DVCPKG_TARGET_TRIPLET=x64-windows ' | Set-Content $file
          nimble.exe build -y

          & cmd /c 'git clone https://github.com/KomodoPlatform/vcpkg vcpkg-repo 2>&1'
          cd vcpkg-repo
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe integrate install
          .\vcpkg.exe install entt
          .\vcpkg.exe install folly
          .\vcpkg.exe install boost-multiprecision
          .\vcpkg.exe install boost-random
          .\vcpkg.exe install doctest
          .\vcpkg.exe install fmt
          .\vcpkg.exe install curl
          .\vcpkg.exe install nlohmann-json
          rd -r ".\buildtrees\" -ErrorAction SilentlyContinue
          rd -r ".\downloads\" -ErrorAction SilentlyContinue
          .\vcpkg.exe install range-v3
          .\vcpkg.exe install libsodium
          .\vcpkg.exe install date
          .\vcpkg.exe install pthreads
          .\vcpkg.exe install zlib
          .\vcpkg.exe install gtest
          .\vcpkg.exe install jsoncpp
          rd -r ".\buildtrees\" -ErrorAction SilentlyContinue
          rd -r ".\downloads\" -ErrorAction SilentlyContinue

          cd ..
          cmd /c '.\ci_tools_atomic_dex.exe build debug 2>&1'
          cmd /c '.\ci_tools_atomic_dex.exe bundle debug 2>&1'
          ls bundle-Debug/bundle.zip

      - name: Upload artifacts (Windows/Debug)
        uses: actions/upload-artifact@v4
        with:
          name: dexpro-win-debug
          path: ./ci_tools_atomic_dex/bundle-Debug/bundle.zip

  publish-release:
      name: Publishing CD releases
      runs-on: ubuntu-latest
      needs: [linux-release, linux-debug, macos-release, macos-debug, windows-debug, windows-release]
      steps:

#        - name: Download linux artifact release
#          uses: actions/download-artifact@v1
#          with:
#            name: AtomicDEX-Pro-Installer-linux-release
#
#        - name: Download linux artifact debug
#          uses: actions/download-artifact@v1
#          with:
#            name: AtomicDEX-Pro-Installer-linux-debug

        - name: Download osx artifact release
          uses: actions/download-artifact@v1
          with:
            name: dexpro-mac-release.dmg

        - name: Download osx artifact debug
          uses: actions/download-artifact@v1
          with:
            name: dexpro-mac-debug.dmg

        - name: Download win artifact release
          uses: actions/download-artifact@v1
          with:
            name: dexpro-win-release

        - name: Download win artifact debug
          uses: actions/download-artifact@v1
          with:
            name: dexpro-win-debug

        - name: Extract branch name
          shell: bash
          run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          id: extract_branch

        - name: Shortify commit sha
          shell: bash
          run: echo "##[set-output name=sha_short;]$(echo ${GITHUB_SHA::7})"
          id: shortify_commit

        - name: Create Release
          id: create_release
          uses: actions/create-release@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: cd_release_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}
            release_name: CD Release ${{ steps.shortify_commit.outputs.sha_short }} ${{ steps.extract_branch.outputs.branch }}
            body: ${{ steps.shortify_commit.outputs.sha_short }}
            draft: false
            prerelease: true

#        - name: Upload Linux Release Asset
#          id: upload-linux-release-asset
#          uses: actions/upload-release-asset@latest
#          env:
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          with:
#            upload_url: ${{ steps.create_release.outputs.upload_url }}
#            asset_path: AtomicDEX-Pro-Installer-linux-release/AtomicDEX-Pro-Installer.zip
#            asset_name: AtomicDex-Pro_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}_linux_rel_install.zip
#            asset_content_type: application/zip
#
#        - name: Upload Linux Debug Asset
#          id: upload-linux-debug-asset
#          uses: actions/upload-release-asset@latest
#          env:
#            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#          with:
#            upload_url: ${{ steps.create_release.outputs.upload_url }}
#            asset_path: AtomicDEX-Pro-Installer-linux-debug/AtomicDEX-Pro-Installer.zip
#            asset_name: AtomicDex-Pro_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}_linux_dbg_install.zip
#            asset_content_type: application/zip

        - name: Upload OSX Release Asset
          id: upload-osx-release-asset
          uses: actions/upload-release-asset@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: dexpro-mac-release.dmg/atomicDEX-Pro.dmg
            asset_name: AtomicDEX-Pro_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}_osx_rel.dmg
            asset_content_type: application/x-apple-diskimage

        - name: Upload OSX Debug Asset
          id: upload-osx-debug-asset
          uses: actions/upload-release-asset@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: dexpro-mac-debug.dmg/atomicDEX-Pro.dmg
            asset_name: AtomicDEX-Pro_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}_osx_dbg.dmg
            asset_content_type: application/x-apple-diskimage

        - name: Upload Windows Release Asset
          id: upload-windows-release-asset
          uses: actions/upload-release-asset@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: dexpro-win-release/bundle.zip
            asset_name: AtomicDEX-Pro_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}_win_rel.zip
            asset_content_type: application/zip

        - name: Upload Windows Debug Asset
          id: upload-windows-debug-asset
          uses: actions/upload-release-asset@latest
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
            asset_path: dexpro-win-debug/bundle.zip
            asset_name: AtomicDEX-Pro_${{ steps.shortify_commit.outputs.sha_short }}_${{ steps.extract_branch.outputs.branch }}_win_debug.zip
            asset_content_type: application/zip
